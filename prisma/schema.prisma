generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  USER
  ADMIN
  SELLER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phone         String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String?
  status        Boolean   @default(true)
  accounts      Account[]
  sessions      Session[]
  isVerified    Boolean   @default(false)
  token         Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Folder {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  slug  String  @unique
  image String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  images    Image[]

  @@map("folders")
}

model Image {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  publicId String
  url      String
  folderId String @db.ObjectId
  folder   Folder @relation(fields: [folderId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("images")
}

model SiteContent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  logoLight String
  logoDark  String
  tagline   String

  email   String
  phone1  String
  phone2  String?
  address String

  facebook      String
  facebookGroup String
  whatsapp      String
  youtube       String
  telegram      String

  @@map("site_contents")
}

model Seminar {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String?
  date                 DateTime
  registrationDeadline DateTime?
  isOnline             Boolean       @default(true)
  link                 String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  participants         Participant[]

  @@map("seminars")
}

model Participant {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phone        String?
  whatsapp     String?
  occupation   String?
  address      String?
  registeredAt DateTime @default(now())
  seminarId    String   @db.ObjectId
  seminar      Seminar  @relation(fields: [seminarId], references: [id])

  @@map("participants")
}
